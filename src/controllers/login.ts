import { Request, Response } from "express";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import {User} from "../models/User";

export const login = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log("üìå –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:", req.body);
    const { email, password } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await User.findOne({ where: { email } });
    if (!user) {
      console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
      res.status(400).json({ error: "User not found" });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å");
      res.status(400).json({ error: "Invalid password" });
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT-—Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { userId: user.id, role: user.role },
      process.env.JWT_SECRET as string,
      { expiresIn: "7h" }
    );

    console.log("‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, —Ç–æ–∫–µ–Ω:", token);
    res.json({ message: "Login successful", token });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ login:", error);
    res.status(500).json({ error: "Internal server error" });
  }
};

